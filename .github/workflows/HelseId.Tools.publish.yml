# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: HelseId.Tools.Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [created]  

jobs:
  build-and-publish-executable:
    runs-on: ubuntu-latest
    steps:
    - name: Debug GITHUB_TOKEN
      run: |
        echo "Attempting to debug GITHUB_TOKEN."
        if [ -n "${{ secrets.GITHUB_TOKEN }}" ] && [ "${{ secrets.GITHUB_TOKEN }}" != "" ]; then
          echo "GITHUB_TOKEN is present."
        else
          echo "GITHUB_TOKEN is EMPTY or not set!"
        fi

    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
  
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Build Project
      run: dotnet build ./src/Fhi.HelseIdSelvbetjening.CLI/Fhi.HelseIdSelvbetjening.CLI.csproj --configuration Release

    - name: Publish Executable
      run: dotnet publish  ./src/Fhi.HelseIdSelvbetjening.CLI/Fhi.HelseIdSelvbetjening.CLI.csproj --configuration Release --output publish_output --self-contained true -p:PublishSingleFile=true --runtime win-x64

    - name: Get version details from tag
      #if: github.event_name == 'release'
      id: get_version_details
      run: |
        echo "Using github.ref: ${{ github.ref }}"
        echo "Using GITHUB_REF env var: $GITHUB_REF"
        
        # Determine the raw name from GITHUB_REF (tag name or branch name)
        RAW_NAME=""
        # Use the GITHUB_REF environment variable directly in shell logic
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          RAW_NAME="${GITHUB_REF#refs/tags/}"
        elif [[ "$GITHUB_REF" == refs/heads/* ]]; then
          RAW_NAME="${GITHUB_REF#refs/heads/}"
        else
          RAW_NAME="$GITHUB_REF" # Fallback for other types of refs
        fi
        echo "Raw name extracted: ${RAW_NAME}"

        # Sanitize the raw name: replace slashes with hyphens for use in filenames/versions
        SANITIZED_NAME=$(echo "${RAW_NAME}" | sed 's|/|-|g')
        echo "Sanitized name for filename: ${SANITIZED_NAME}"

        VERSION_NUMBER_OUT=""
        FILENAME_VERSION_SUFFIX_OUT=""

        if [[ "${SANITIZED_NAME}" == beta_v* ]]; then
          TEMP_VERSION="${SANITIZED_NAME#beta_v}"
          VERSION_NUMBER_OUT="${TEMP_VERSION}"
          FILENAME_VERSION_SUFFIX_OUT="beta-${TEMP_VERSION}"
        elif [[ "${SANITIZED_NAME}" == v* ]]; then
          TEMP_VERSION="${SANITIZED_NAME#v}"
          VERSION_NUMBER_OUT="${TEMP_VERSION}"
          FILENAME_VERSION_SUFFIX_OUT="v${TEMP_VERSION}"
        else
          VERSION_NUMBER_OUT="${SANITIZED_NAME}"
          FILENAME_VERSION_SUFFIX_OUT="${SANITIZED_NAME}"
        fi
        
        echo "VERSION_NUMBER=${VERSION_NUMBER_OUT}" >> $GITHUB_OUTPUT
        echo "FILENAME_VERSION_SUFFIX=${FILENAME_VERSION_SUFFIX_OUT}" >> $GITHUB_OUTPUT
        echo "Final VERSION_NUMBER output: ${VERSION_NUMBER_OUT}"
        echo "Final FILENAME_VERSION_SUFFIX output: ${FILENAME_VERSION_SUFFIX_OUT}"

    - name: Zip published files for release
      #if: github.event_name == 'release'
      run: |
        cd publish_output
        zip -r ../helseid-cli-win-x64-${{ steps.get_version_details.outputs.FILENAME_VERSION_SUFFIX }}.zip .
        cd ..

    - name: Upload Release Asset (Zip)
      #if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./helseid-cli-win-x64-${{ steps.get_version_details.outputs.FILENAME_VERSION_SUFFIX }}.zip
        asset_name: helseid-cli-win-x64-${{ steps.get_version_details.outputs.FILENAME_VERSION_SUFFIX }}.zip
        asset_content_type: application/zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: publish_output/
        retention-days: 2  # Optional: Set retention period

  # publish-nuget:
  #   runs-on: ubuntu-latest
  #   # Only run when a release is created
  #   if: github.event_name == 'release'
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: 9.0.x

  #   - name: Get version from tag
  #     id: get_version
  #     run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

  #   - name: Pack NuGet package
  #     run: |
  #       dotnet pack ./src/Fhi.HelseIdSelvbetjening.CLI/Fhi.HelseIdSelvbetjening.CLI.csproj \
  #       --configuration Release \
  #       -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
  #       --output nuget-packages

  #   - name: Publish NuGet package
  #     run: dotnet nuget push ./nuget-packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
  #     if: github.event_name == 'release'

  #   - name: Upload NuGet Package Artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: nuget-package
  #       path: nuget-packages/*.nupkg
  #       retention-days: 7
