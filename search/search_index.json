{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fhi.HelseId.Tools","text":"<p>Developer and operations tools to work with HelseID clients and registrations for FHI</p>"},{"location":"#client-secret-tool","title":"Client secret tool","text":"<p>Client secret tool</p> <p></p>"},{"location":"ClientSecret/acceptance-tests-guide/","title":"Read Client Secret Expiration Command","text":"<p>This document explains how to use the <code>readclientsecretexpiration</code> command, which checks the expiration date for a HelseID client secret.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#command-usage","title":"Command Usage","text":"<p>The command allows you to check when a client secret expires in two ways:</p>"},{"location":"ClientSecret/acceptance-tests-guide/#1-using-a-private-key-file","title":"1. Using a Private Key File","text":"<pre><code>helseid-cli readclientsecretexpiration --clientId \"your-client-id\" --existingPrivateJwkPath \"path/to/private.json\"\n</code></pre> <p>Or with short options:</p> <pre><code>helseid-cli readclientsecretexpiration -c \"your-client-id\" -p \"path/to/private.json\"\n</code></pre>"},{"location":"ClientSecret/acceptance-tests-guide/#2-using-a-direct-private-key-value","title":"2. Using a Direct Private Key Value","text":"<pre><code>helseid-cli readclientsecretexpiration --clientId \"your-client-id\" --existingPrivateJwk \"{...jwk json...}\"\n</code></pre> <p>Or with short options:</p> <pre><code>helseid-cli readclientsecretexpiration -c \"your-client-id\" -j \"{...jwk json...}\"\n</code></pre>"},{"location":"ClientSecret/acceptance-tests-guide/#prerequisites","title":"Prerequisites","text":"<p>To use this command, you need:</p> <ol> <li>Access to HelseID environment</li> <li>A client with the <code>nhn:selvbetjening/client</code> scope</li> <li>Valid private key for the client</li> </ol>"},{"location":"ClientSecret/acceptance-tests-guide/#expected-output","title":"Expected Output","text":"<p>When successful, the command will output:</p> <ul> <li>Information about the client ID being checked</li> <li>The expiration date of the client secret (if available)</li> <li>Or a message indicating that the expiration date is not available</li> </ul>"},{"location":"ClientSecret/acceptance-tests-guide/#sample-private-key-format","title":"Sample Private Key Format","text":"<p>Your private key file should contain a valid RSA private key in JWK format:</p> <pre><code>{\n  \"kty\": \"RSA\",\n  \"d\": \"...\",\n  \"n\": \"...\",\n  \"e\": \"AQAB\",\n  \"use\": \"sig\",\n  \"kid\": \"...\"\n}\n</code></pre>"},{"location":"ClientSecret/client-secret-update-commands/","title":"Update client with new keys Commands","text":"<ol> <li>User Request: A user initiates a request to upgrade/rotate the client secret for an application through the tools console interface.</li> <li>Authentication: The Client Secret Tool authenticates with Helse ID using the old secret and client ID to verify its identity to get an access token.</li> <li>Secret Update Process: The tool updates the client configuration throuhg the Helse ID Selvbetjening API passing the access token. The updated secret is then stored in the Client Configuration inside Helse ID.</li> </ol>"},{"location":"ClientSecret/client-secret-update-commands/#parameters","title":"Parameters","text":"Parameter name Descrition Sample ClientId The Client to updates unique Identifier found in Klient konfigurasjon in HelseId Selvbetjening <code>37a08838-db82-4de0-bfe1-bed876e7086e</code> NewPublicJwkPath Path to the new public key. <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_public.json</code> NewPublicJwk public key string <code>{\\\"alg\\\":\\\"PS512\\\",\\\"d\\\":\\\"xxx .....}</code> ExistingPrivateJwkPath Path to the new private key <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_private.json</code> ExistingPrivateJwk private key string <code>{\\\"alg\\\":\\\"PS512\\\",\\\"d\\\":\\\"xxx .....}</code>"},{"location":"ClientSecret/client-secret-update-commands/#commands","title":"Commands","text":"<pre><code> updateclientkey --ClientId &lt;CLIENT_ID&gt; --NewPublicJwk &lt;NEW_KEY&gt;  --ExistingPrivateJwk &lt;OLD_KEY&gt;\n</code></pre> <pre><code> updateclientkey --ClientId &lt;CLIENT_ID&gt; --NewPublicJwkPath &lt;PATH&gt; --ExistingPrivateJwkPath &lt;PATH&gt;\n</code></pre>"},{"location":"ClientSecret/generatekey-command/","title":"Generate new keys Commands","text":""},{"location":"ClientSecret/generatekey-command/#parameters","title":"Parameters","text":"Parameter name Descrition Sample KeyFileNamePrefix Prefix of name of the public and private key file. The keys will be named <code>&lt;FileName&gt;_private.json</code> and <code>&lt;FileName&gt;_public.json</code> KeyDirectory Path to where private and public key will be stored"},{"location":"ClientSecret/generatekey-command/#commands","title":"Commands","text":"<pre><code> generatekey --KeyFileNamePrefix &lt;NAME&gt; --KeyDirectory &lt;PATH&gt;\n</code></pre>"},{"location":"ClientSecret/overview/","title":"Tool for update HelseId Client secrets (Jwk)","text":"<p>Client Secret Tool is a console application that facilitates the secure rotation of client secrets for applications integrated with Helse ID. A user initiates a request to upgrade/rotate the client secret for an application through the tools console interface. The tool provides commands for:</p> <ul> <li>Generation of new keys Command for generate new private and public Json Web Keys (jwk). See overview of key generation commands</li> <li>Update client keys in HelseID client configuration: Command for update secrets (public key) on a HelseID client. See overview of update client secret commands</li> <li>Read client secret expiration: Command for reading the expiration date of client secrets to enable automated monitoring and renewal scheduling. See overview of read client secret expiration commands</li> </ul> <p>The image below illustrates the steps for updating a client keys (secrets)</p> <p></p> <ol> <li>Update Klientkonfiguration scope: In order for an application to use the tool the Client must have registered nhn:selvbetjening/client scope. The scope nhn:selvbetjening/client to klientsystem must be added to the client system and klientkonfigurasjon</li> <li>Generate new keys: The tool generate two new json web keys (jwk), private and public, with the command <code>generatekey</code>. The public key is used by HelseID to validate the client assertion. The private key is used by the application to generate a client assertion token.</li> <li>Update client with publik key: After new keys are generated HelseId should be updated with the new public key with the command <code>updateclientkey</code>.</li> <li>Update application with private key: The application configuration must be updated with the new private key.</li> </ol>"},{"location":"ClientSecret/read-client-secret-expiration-command/","title":"Read client secret expiration command","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#read-client-secret-expiration-command","title":"Read Client Secret Expiration Command","text":"<p>The <code>readclientsecretexpiration</code> command allows you to query the expiration date of a client secret from HelseID. This is useful for automated monitoring and scheduling of client secret renewals in systems like Octopus Deploy.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#purpose","title":"Purpose","text":"<p>This command enables automation of client secret management by providing programmatic access to secret expiration dates. It can be used to:</p> <ul> <li>Monitor client secret expiration dates</li> <li>Schedule automated secret renewals in CI/CD pipelines</li> <li>Set up alerts when secrets are approaching expiration</li> <li>Audit client secret status across multiple clients</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#authentication","title":"Authentication","text":"<p>The command uses the client's existing private JWK (JSON Web Key) to authenticate with HelseID, similar to the update commands.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#parameters","title":"Parameters","text":"Parameter name Description Required Sample ClientId The Client's unique identifier found in Klient konfigurasjon in HelseId Selvbetjening Yes <code>37a08838-db82-4de0-bfe1-bed876e7086e</code> ExistingPrivateJwkPath Path to the existing private key file No* <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_private.json</code> ExistingPrivateJwk Private key string No* <code>{\"alg\":\"PS512\",\"d\":\"xxx .....}</code> <p>*Either ExistingPrivateJwkPath or ExistingPrivateJwk must be provided.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#commands","title":"Commands","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#read-expiration-using-private-key-file","title":"Read expiration using private key file","text":"<pre><code>helseid-cli readclientsecretexpiration --ClientId &lt;CLIENT_ID&gt; --ExistingPrivateJwkPath &lt;PATH_TO_PRIVATE_KEY&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#read-expiration-using-private-key-string","title":"Read expiration using private key string","text":"<pre><code>helseid-cli readclientsecretexpiration --ClientId &lt;CLIENT_ID&gt; --ExistingPrivateJwk &lt;PRIVATE_KEY_JSON&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#using-short-parameter-names","title":"Using short parameter names","text":"<pre><code>helseid-cli readclientsecretexpiration -c &lt;CLIENT_ID&gt; -ep &lt;PATH_TO_PRIVATE_KEY&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#examples","title":"Examples","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#example-1-read-expiration-from-file","title":"Example 1: Read expiration from file","text":"<pre><code>helseid-cli readclientsecretexpiration \\\n  --ClientId \"37a08838-db82-4de0-bfe1-bed876e7086e\" \\\n  --ExistingPrivateJwkPath \"C:\\keys\\client_private.json\"\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#example-2-read-expiration-with-inline-key","title":"Example 2: Read expiration with inline key","text":"<pre><code>helseid-cli readclientsecretexpiration \\\n  --ClientId \"37a08838-db82-4de0-bfe1-bed876e7086e\" \\\n  --ExistingPrivateJwk '{\"alg\":\"PS512\",\"d\":\"...private key data...\"}'\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#working-with-escaped-json-from-helseid-api","title":"Working with Escaped JSON from HelseID API","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#using-helseid-api-responses-with-powershell","title":"Using HelseID API responses with PowerShell","text":"<p>When HelseID APIs return JWK data, it often comes with escaped quotes like: <code>{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"...\\\"}</code></p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#best-practice-powershell-variable-preserves-api-response-exactly","title":"Best practice: PowerShell variable (preserves API response exactly)","text":"<pre><code># Get JWK from API response - use as-is without modification\n$apiJwkResponse = '{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"my-key-2024\\\",\\\"d\\\":\\\"MIIEowIBAAKCAQEA...\\\",\\\"n\\\":\\\"xGHNF7qI...\\\",\\\"e\\\":\\\"AQAB\\\"}'\n\ndotnet run -- readclientsecretexpiration --ClientId \"my-client-id\" --ExistingPrivateJwk $apiJwkResponse\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#alternative-powershell-here-string","title":"Alternative: PowerShell here-string","text":"<pre><code># Wrap API response in here-string without modification\n$json = @\"\n{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"my-key-2024\\\",\\\"d\\\":\\\"MIIEowIBAAKCAQEA...\\\",\\\"n\\\":\\\"xGHNF7qI...\\\",\\\"e\\\":\\\"AQAB\\\"}\n\"@\n\ndotnet run -- readclientsecretexpiration --ClientId \"my-client-id\" --ExistingPrivateJwk $json\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#important-avoid-direct-command-line-usage-with-escaped-json","title":"Important: Avoid Direct Command Line Usage with Escaped JSON","text":"<pre><code># This will fail due to shell parsing issues:\ndotnet run -- readclientsecretexpiration --ClientId \"my-client-id\" --ExistingPrivateJwk \"{\\\"kty\\\":\\\"RSA\\\"}\"\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#output","title":"Output","text":"<p>The command outputs the expiration date in a human-readable format:</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#successful-response","title":"Successful response","text":"<pre><code>Environment: Production\nClient secret expiration date: 2025-06-27 14:30:00\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#error-response","title":"Error response","text":"<pre><code>Environment: Production\nFailed to read client secret expiration: Unauthorized\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#no-expiration-date-available","title":"No expiration date available","text":"<pre><code>Environment: Production\nClient secret expiration date not available in response\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: Success - expiration date retrieved successfully</li> <li>Non-zero: Error occurred (authentication failure, network error, etc.)</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#integration-with-automation-systems","title":"Integration with Automation Systems","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#octopus-deploy-integration","title":"Octopus Deploy Integration","text":"<p>This command can be integrated into Octopus Deploy runbooks to monitor client secret expiration:</p> <pre><code># PowerShell script step in Octopus Deploy\n$clientId = \"#{ClientId}\"\n$privateKeyPath = \"#{PrivateKeyPath}\"\n\n$result = &amp; helseid-cli readclientsecretexpiration -c $clientId -ep $privateKeyPath\n\nif ($LASTEXITCODE -eq 0) {\n    Write-Host \"Successfully retrieved expiration date: $result\"\n\n    # Extract date and calculate days until expiry\n    if ($result -match \"(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\") {\n        $expirationDate = [DateTime]::Parse($matches[1])\n        $daysUntilExpiry = ($expirationDate - (Get-Date)).Days\n\n        Write-Host \"Days until expiry: $daysUntilExpiry\"\n\n        if ($daysUntilExpiry -lt 30) {\n            Write-Warning \"Secret expires soon - scheduling renewal\"\n            # Add renewal logic here\n        }\n    }\n} else {\n    Write-Error \"Failed to retrieve expiration date: $result\"\n    Exit 1\n}\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#bash-script-example","title":"Bash Script Example","text":"<pre><code>#!/bin/bash\n# Capture exit code and output\noutput=$(helseid-cli readclientsecretexpiration --ClientId \"$CLIENT_ID\" --ExistingPrivateJwkPath \"$KEY_PATH\" 2&gt;&amp;1)\nexit_code=$?\n\nif [ $exit_code -eq 0 ]; then\n    echo \"Output: $output\"\n    # Extract date from output (assuming format: \"Client secret expiration date: 2025-06-27 14:30:00\")\n    expiration_date=$(echo \"$output\" | grep -o \"[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [0-9]\\{2\\}:[0-9]\\{2\\}:[0-9]\\{2\\}\")\n\n    if [ ! -z \"$expiration_date\" ]; then\n        echo \"Secret expires at: $expiration_date\"\n        # Calculate days until expiration (requires date command)\n        expiry_seconds=$(date -d \"$expiration_date\" +%s)\n        current_seconds=$(date +%s)\n        days_until_expiry=$(( ($expiry_seconds - $current_seconds) / 86400 ))\n        echo \"Days until expiry: $days_until_expiry\"\n\n        if [ $days_until_expiry -lt 30 ]; then\n            echo \"WARNING: Secret expires soon - schedule renewal!\"\n        fi\n    fi\nelse\n    echo \"Failed to read expiration: $output\"\n    exit 1\nfi\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#powershell-real-world-example-with-api-response","title":"PowerShell Real-World Example with API Response","text":"<pre><code># Real-world example: Get JWK from HelseID API and check expiration\n$clientId = \"my-client-id\"\n\n# API response comes with escaped quotes - use as-is\n$jwkFromApi = '{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"my-key-2024\\\",\\\"d\\\":\\\"MIIEowIBAAKCAQEA...\\\"}'\n\n# Pass API response directly without modification\n$result = &amp; helseid-cli readclientsecretexpiration --ClientId $clientId --ExistingPrivateJwk $jwkFromApi\n\nif ($LASTEXITCODE -eq 0) {\n    Write-Host \"Secret expiration retrieved: $result\"\n\n    # Extract date and calculate days until expiry\n    if ($result -match \"(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\") {\n        $expirationDate = [DateTime]::Parse($matches[1])\n        $daysUntilExpiry = ($expirationDate - (Get-Date)).Days\n\n        Write-Host \"Expires: $expirationDate ($daysUntilExpiry days)\"\n\n        if ($daysUntilExpiry -lt 30) {\n            Write-Warning \"Secret expires soon - schedule renewal!\"\n            # Add renewal logic or notification here\n        }\n    }\n} else {\n    Write-Error \"Failed: $result\"\n}\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#notes","title":"Notes","text":"<ul> <li>The command uses the same authentication mechanism as other HelseID commands</li> <li>Requires appropriate permissions (<code>nhn:selvbetjening/client</code> scope)</li> <li>Returns exit code 0 on success, non-zero on error for automation purposes</li> <li>Output format is designed to be easily parsed by automation scripts</li> <li>Expiration date enables precise date calculations and automation logic</li> </ul>"}]}