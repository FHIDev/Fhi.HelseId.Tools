{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fhi.HelseId.Tools","text":"<p>Developer and operations tools to work with HelseID clients and registrations for FHI</p>"},{"location":"#client-secret-tool","title":"Client secret tool","text":"<p>Client secret tool</p> <p></p>"},{"location":"ClientSecret/acceptance-tests-guide/","title":"Acceptance Tests for ReadClientSecretExpiration Command","text":"<p>This document explains how to run the acceptance tests for the new <code>readclientsecretexpiration</code> command.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#overview","title":"Overview","text":"<p>The acceptance tests verify that the CLI command works end-to-end against a real test environment. These tests are marked as <code>[Explicit]</code> and must be run manually.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#available-tests","title":"Available Tests","text":""},{"location":"ClientSecret/acceptance-tests-guide/#1-readclientsecretexpiration_frompath","title":"1. ReadClientSecretExpiration_FromPath","text":"<p>Tests reading client secret expiration using a private key file.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#2-readclientsecretexpiration_fromdirectkey","title":"2. ReadClientSecretExpiration_FromDirectKey","text":"<p>Tests reading client secret expiration using a private key value directly.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#prerequisites","title":"Prerequisites","text":"<p>Before running these tests, you need:</p> <ol> <li>Test Environment: Access to HelseID test environment</li> <li>Valid Test Client: A client configured with:</li> <li>The <code>nhn:selvbetjening/client</code> scope</li> <li>Valid client secret (private key)</li> <li>Test Data: Private key file in <code>TestData/oldkey.json</code></li> </ol>"},{"location":"ClientSecret/acceptance-tests-guide/#setup-instructions","title":"Setup Instructions","text":""},{"location":"ClientSecret/acceptance-tests-guide/#1-configure-test-client-id","title":"1. Configure Test Client ID","text":"<p>Edit the test methods in <code>AcceptanceTests.cs</code> and replace:</p> <pre><code>var clientId = \"88d474a8-07df-4dc4-abb0-6b759c2b99ec\"; // Replace with your test client ID\n</code></pre>"},{"location":"ClientSecret/acceptance-tests-guide/#2-prepare-test-data-directory","title":"2. Prepare Test Data Directory","text":"<p>Create a <code>TestData</code> directory in the test project root (not in bin folder) and add your private key file:</p> <pre><code>tests/Fhi.HelseIdSelvbetjening.CLI.Tests/TestData/\n\u2514\u2500\u2500 oldkey.json  // Your test client's private key\n</code></pre> <p>Important: The test will automatically locate the correct TestData directory relative to the test project, not the bin output directory.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#3-set-environment","title":"3. Set Environment","text":"<p>The tests automatically set <code>DOTNET_ENVIRONMENT=Test</code> to use test configuration.</p>"},{"location":"ClientSecret/acceptance-tests-guide/#running-the-tests","title":"Running the Tests","text":""},{"location":"ClientSecret/acceptance-tests-guide/#via-visual-studio","title":"Via Visual Studio","text":"<ol> <li>Open Test Explorer</li> <li>Find the acceptance tests under <code>Fhi.HelseIdSelvbetjening.CLI.AcceptanceTests</code></li> <li>Right-click on the specific test you want to run</li> <li>Select \"Run Selected Tests\"</li> </ol>"},{"location":"ClientSecret/acceptance-tests-guide/#via-command-line","title":"Via Command Line","text":"<pre><code># Run specific acceptance test\ncd \"c:\\git\\Fhi.HelseId.Tools\"\ndotnet test tests\\Fhi.HelseIdSelvbetjening.CLI.Tests\\Fhi.HelseIdSelvbetjening.CLI.Tests.csproj --filter \"ReadClientSecretExpiration_FromPath\"\n\n# Run all acceptance tests\ndotnet test tests\\Fhi.HelseIdSelvbetjening.CLI.Tests\\Fhi.HelseIdSelvbetjening.CLI.Tests.csproj --filter \"AcceptanceTests\"\n</code></pre>"},{"location":"ClientSecret/acceptance-tests-guide/#expected-results","title":"Expected Results","text":""},{"location":"ClientSecret/acceptance-tests-guide/#success-case","title":"Success Case","text":"<ul> <li>Exit code: 0</li> <li>Output contains: \"Reading client secret expiration for client\"</li> <li>May contain expiration date or \"expiration date not available\"</li> </ul>"},{"location":"ClientSecret/acceptance-tests-guide/#failure-case","title":"Failure Case","text":"<ul> <li>Exit code: non-zero</li> <li>Output contains error message explaining the issue</li> </ul>"},{"location":"ClientSecret/acceptance-tests-guide/#sample-private-key-format","title":"Sample Private Key Format","text":"<p>Your <code>oldkey.json</code> should contain a valid RSA private key in JWK format:</p> <pre><code>{\n  \"kty\": \"RSA\",\n  \"d\": \"...\",\n  \"n\": \"...\",\n  \"e\": \"AQAB\",\n  \"use\": \"sig\",\n  \"kid\": \"...\"\n}\n</code></pre>"},{"location":"ClientSecret/acceptance-tests-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ClientSecret/acceptance-tests-guide/#common-issues","title":"Common Issues","text":"<ol> <li>\"Client not found or access denied\"</li> <li>Verify client ID is correct</li> <li>Ensure client has <code>nhn:selvbetjening/client</code> scope</li> <li> <p>Check private key matches the client</p> </li> <li> <p>\"No private key provided\"</p> </li> <li>Verify <code>TestData/oldkey.json</code> exists and is valid JSON</li> <li> <p>Check file path is correct</p> </li> <li> <p>Network/Environment Issues</p> </li> <li>Verify test environment is accessible</li> <li>Check if authentication service is responding</li> </ol>"},{"location":"ClientSecret/acceptance-tests-guide/#debug-tips","title":"Debug Tips","text":"<ul> <li>The tests capture console output for inspection</li> <li>Exit codes and output are printed for debugging</li> <li>Use the explicit nature of tests to run them individually</li> </ul>"},{"location":"ClientSecret/acceptance-tests-guide/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>While these are manual acceptance tests, you could potentially:</p> <ol> <li>Set up dedicated test environment with known test clients</li> <li>Store test keys securely in CI/CD secrets</li> <li>Run as part of release validation (not regular CI)</li> </ol> <p>Note: Be careful with real credentials in automated environments.</p>"},{"location":"ClientSecret/client-secret-update-commands/","title":"Update client with new keys Commands","text":"<ol> <li>User Request: A user initiates a request to upgrade/rotate the client secret for an application through the tools console interface.</li> <li>Authentication: The Client Secret Tool authenticates with Helse ID using the old secret and client ID to verify its identity to get an access token.</li> <li>Secret Update Process: The tool updates the client configuration throuhg the Helse ID Selvbetjening API passing the access token. The updated secret is then stored in the Client Configuration inside Helse ID.</li> </ol>"},{"location":"ClientSecret/client-secret-update-commands/#parameters","title":"Parameters","text":"Parameter name Descrition Sample ClientId The Client to updates unique Identifier found in Klient konfigurasjon in HelseId Selvbetjening <code>37a08838-db82-4de0-bfe1-bed876e7086e</code> NewPublicJwkPath Path to the new public key. <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_public.json</code> NewPublicJwk public key string <code>{\\\"alg\\\":\\\"PS512\\\",\\\"d\\\":\\\"xxx .....}</code> ExistingPrivateJwkPath Path to the new private key <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_private.json</code> ExistingPrivateJwk private key string <code>{\\\"alg\\\":\\\"PS512\\\",\\\"d\\\":\\\"xxx .....}</code>"},{"location":"ClientSecret/client-secret-update-commands/#commands","title":"Commands","text":"<pre><code> updateclientkey --ClientId &lt;CLIENT_ID&gt; --NewPublicJwk &lt;NEW_KEY&gt;  --ExistingPrivateJwk &lt;OLD_KEY&gt;\n</code></pre> <pre><code> updateclientkey --ClientId &lt;CLIENT_ID&gt; --NewPublicJwkPath &lt;PATH&gt; --ExistingPrivateJwkPath &lt;PATH&gt;\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/","title":"Demo Usage Example for ReadClientSecretExpiration Command","text":"<p>This document demonstrates how to use the new <code>readclientsecretexpiration</code> command.</p>"},{"location":"ClientSecret/demo-usage-example/#command-syntax","title":"Command Syntax","text":"<pre><code>dotnet run -- readclientsecretexpiration --ClientId &lt;client-id&gt; [--ExistingPrivateJwkPath &lt;path&gt;] [--ExistingPrivateJwk &lt;jwk&gt;]\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#example-usage","title":"Example Usage","text":""},{"location":"ClientSecret/demo-usage-example/#using-a-private-key-file","title":"Using a private key file","text":"<pre><code>dotnet run -- readclientsecretexpiration --ClientId \"my-client-id\" --ExistingPrivateJwkPath \"./my-private-key.jwk\"\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#using-a-private-key-value-directly","title":"Using a private key value directly:","text":"<pre><code>dotnet run -- readclientsecretexpiration --ClientId \"my-client-id\" --ExistingPrivateJwk '{\"kty\":\"RSA\",\"d\":\"...\",\"n\":\"...\",\"e\":\"AQAB\"}'\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#expected-output","title":"Expected Output","text":""},{"location":"ClientSecret/demo-usage-example/#success-case","title":"Success Case","text":"<pre><code>Reading client secret expiration for client: my-client-id\n1735689599\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#error-case-invalid-client","title":"Error Case (Invalid Client)","text":"<pre><code>Reading client secret expiration for client: invalid-client\n\u2717 Error: Client not found or access denied\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#no-expiration-date-available","title":"No Expiration Date Available","text":"<pre><code>Reading client secret expiration for client: my-client-id\nClient secret expiration date not available in response\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#integration-with-automation-systems","title":"Integration with Automation Systems","text":""},{"location":"ClientSecret/demo-usage-example/#octopus-deploy-variable","title":"Octopus Deploy Variable","text":"<p>You can capture the output for use in automation:</p> <pre><code># Capture exit code and output\noutput=$(dotnet run -- readclientsecretexpiration --ClientId \"$CLIENT_ID\" --ExistingPrivateJwkPath \"$KEY_PATH\" 2&gt;&amp;1)\nexit_code=$?\n\nif [ $exit_code -eq 0 ]; then\n    echo \"Output: $output\"\n    # Extract epoch timestamp from output (the numeric value)\n    epoch_time=$(echo \"$output\" | grep -o \"[0-9]\\+$\")\n    if [ ! -z \"$epoch_time\" ]; then\n        echo \"Secret expires at epoch: $epoch_time\"\n        # Calculate days until expiration\n        current_epoch=$(date +%s)\n        days_until_expiry=$(( ($epoch_time - $current_epoch) / 86400 ))\n        echo \"Days until expiry: $days_until_expiry\"\n    fi\nelse\n    echo \"Failed to read expiration: $output\"\n    exit 1\nfi\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#powershell-example","title":"PowerShell Example","text":"<pre><code>$result = &amp; dotnet run -- readclientsecretexpiration --ClientId $ClientId --ExistingPrivateJwkPath $KeyPath\nif ($LASTEXITCODE -eq 0) {\n    Write-Host \"Secret expiration retrieved successfully: $result\"\n\n    # Extract epoch timestamp from output (the numeric value)\n    if ($result -match \"(\\d+)$\") {\n        $epochTime = [long]$matches[1]\n        $expirationDate = [DateTimeOffset]::FromUnixTimeSeconds($epochTime).DateTime\n        $daysUntilExpiry = ($expirationDate - (Get-Date)).Days\n\n        Write-Host \"Expiration epoch: $epochTime\"\n        Write-Host \"Expiration date: $expirationDate\"\n        Write-Host \"Days until expiry: $daysUntilExpiry\"\n\n        # Schedule renewal logic here\n        if ($daysUntilExpiry -lt 30) {\n            Write-Warning \"Secret expires in less than 30 days!\"\n        }\n    }\n} else {\n    Write-Error \"Failed to read secret expiration: $result\"\n}\n</code></pre>"},{"location":"ClientSecret/demo-usage-example/#notes","title":"Notes","text":"<ul> <li>The command uses the same authentication mechanism as other HelseID commands</li> <li>Requires appropriate permissions (<code>nhn:selvbetjening/client</code> scope)</li> <li>Returns exit code 0 on success, non-zero on error for automation purposes</li> <li>Output is a simple epoch timestamp (Unix timestamp) for easy parsing in automation scripts</li> <li>Epoch timestamp enables precise date calculations and automation logic</li> </ul>"},{"location":"ClientSecret/generatekey-command/","title":"Generate new keys Commands","text":""},{"location":"ClientSecret/generatekey-command/#parameters","title":"Parameters","text":"Parameter name Descrition Sample KeyFileNamePrefix Prefix of name of the public and private key file. The keys will be named <code>&lt;FileName&gt;_private.json</code> and <code>&lt;FileName&gt;_public.json</code> KeyDirectory Path to where private and public key will be stored"},{"location":"ClientSecret/generatekey-command/#commands","title":"Commands","text":"<pre><code> generatekey --KeyFileNamePrefix &lt;NAME&gt; --KeyDirectory &lt;PATH&gt;\n</code></pre>"},{"location":"ClientSecret/overview/","title":"Tool for update HelseId Client secrets (Jwk)","text":"<p>Client Secret Tool is a console application that facilitates the secure rotation of client secrets for applications integrated with Helse ID. A user initiates a request to upgrade/rotate the client secret for an application through the tools console interface. The tool provides commands for:</p> <ul> <li>Generation of new keys Command for generate new private and public Json Web Keys (jwk). See overview of key generation commands</li> <li>Update client keys in HelseID client configuration: Command for update secrets (public key) on a HelseID client. See overview of update client secret commands</li> <li>Read client secret expiration: Command for reading the expiration date of client secrets to enable automated monitoring and renewal scheduling. See overview of read client secret expiration commands</li> </ul> <p>The image below illustrates the steps for updating a client keys (secrets)</p> <p></p> <ol> <li>Update Klientkonfiguration scope: In order for an application to use the tool the Client must have registered nhn:selvbetjening/client scope. The scope nhn:selvbetjening/client to klientsystem must be added to the client system and klientkonfigurasjon</li> <li>Generate new keys: The tool generate two new json web keys (jwk), private and public, with the command <code>generatekey</code>. The public key is used by HelseID to validate the client assertion. The private key is used by the application to generate a client assertion token.</li> <li>Update client with publik key: After new keys are generated HelseId should be updated with the new public key with the command <code>updateclientkey</code>.</li> <li>Update application with private key: The application configuration must be updated with the new private key.</li> </ol>"},{"location":"ClientSecret/read-client-secret-expiration-command/","title":"Read Client Secret Expiration Command","text":"<p>The <code>readclientsecretexpiration</code> command allows you to query the expiration date of a client secret from HelseID. This is useful for automated monitoring and scheduling of client secret renewals in systems like Octopus Deploy.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#purpose","title":"Purpose","text":"<p>This command enables automation of client secret management by providing programmatic access to secret expiration dates. It can be used to:</p> <ul> <li>Monitor client secret expiration dates</li> <li>Schedule automated secret renewals in CI/CD pipelines</li> <li>Set up alerts when secrets are approaching expiration</li> <li>Audit client secret status across multiple clients</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#authentication","title":"Authentication","text":"<p>The command authenticates with HelseID using the client's existing private key and the DPoP (Demonstration of Proof-of-Possession) authentication flow, similar to the update commands.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#parameters","title":"Parameters","text":"Parameter name Description Required Sample ClientId The Client's unique identifier found in Klient konfigurasjon in HelseId Selvbetjening Yes <code>37a08838-db82-4de0-bfe1-bed876e7086e</code> ExistingPrivateJwkPath Path to the existing private key file No* <code>C:\\keys\\37a08838-db82-4de0-bfe1-bed876e7086e_private.json</code> ExistingPrivateJwk Private key string No* <code>{\"alg\":\"PS512\",\"d\":\"xxx .....}</code> <p>*Either ExistingPrivateJwkPath or ExistingPrivateJwk must be provided.</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#commands","title":"Commands","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#read-expiration-using-private-key-file","title":"Read expiration using private key file","text":"<pre><code>helseid-cli readclientsecretexpiration --ClientId &lt;CLIENT_ID&gt; --ExistingPrivateJwkPath &lt;PATH_TO_PRIVATE_KEY&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#read-expiration-using-private-key-string","title":"Read expiration using private key string","text":"<pre><code>helseid-cli readclientsecretexpiration --ClientId &lt;CLIENT_ID&gt; --ExistingPrivateJwk &lt;PRIVATE_KEY_JSON&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#using-short-parameter-names","title":"Using short parameter names","text":"<pre><code>helseid-cli readclientsecretexpiration -c &lt;CLIENT_ID&gt; -ep &lt;PATH_TO_PRIVATE_KEY&gt;\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#examples","title":"Examples","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#example-1-read-expiration-from-file","title":"Example 1: Read expiration from file","text":"<pre><code>helseid-cli readclientsecretexpiration \\\n  --ClientId \"37a08838-db82-4de0-bfe1-bed876e7086e\" \\\n  --ExistingPrivateJwkPath \"C:\\keys\\client_private.json\"\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#example-2-read-expiration-with-inline-key","title":"Example 2: Read expiration with inline key","text":"<pre><code>helseid-cli readclientsecretexpiration \\\n  --ClientId \"37a08838-db82-4de0-bfe1-bed876e7086e\" \\\n  --ExistingPrivateJwk '{\"alg\":\"PS512\",\"d\":\"...private key data...\"}'\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#output","title":"Output","text":"<p>The command outputs the expiration date in a human-readable format:</p>"},{"location":"ClientSecret/read-client-secret-expiration-command/#successful-response","title":"Successful response","text":"<pre><code>Environment: Production\nClient secret expiration date: 2025-06-27 14:30:00\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#error-response","title":"Error response","text":"<pre><code>Environment: Production\nFailed to read client secret expiration: Unauthorized\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#no-expiration-date-available","title":"No expiration date available","text":"<pre><code>Environment: Production\nClient secret expiration date not available in response\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: Success - expiration date retrieved successfully</li> <li>Non-zero: Error occurred (authentication failure, network error, etc.)</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#integration-with-automation-systems","title":"Integration with Automation Systems","text":""},{"location":"ClientSecret/read-client-secret-expiration-command/#octopus-deploy-integration","title":"Octopus Deploy Integration","text":"<p>This command can be integrated into Octopus Deploy runbooks to monitor client secret expiration:</p> <pre><code># PowerShell script step in Octopus Deploy\n$clientId = \"#{ClientId}\"\n$privateKeyPath = \"#{PrivateKeyPath}\"\n\n$result = &amp; helseid-cli readclientsecretexpiration -c $clientId -ep $privateKeyPath\n\nif ($LASTEXITCODE -eq 0) {\n    Write-Host \"Successfully retrieved expiration date: $result\"\n    # Parse expiration date and check if renewal is needed\n    # Schedule renewal if expiration is within threshold\n} else {\n    Write-Error \"Failed to read client secret expiration\"\n    exit 1\n}\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":"<pre><code># Example GitHub Actions workflow\n- name: Check Client Secret Expiration\n  run: |\n    expiration_output=$(helseid-cli readclientsecretexpiration \\\n      --ClientId \"${{ secrets.CLIENT_ID }}\" \\\n      --ExistingPrivateJwk \"${{ secrets.PRIVATE_JWK }}\")\n\n    echo \"Expiration check result: $expiration_output\"\n\n    # Parse output and determine if renewal is needed\n    # Trigger renewal workflow if necessary\n</code></pre>"},{"location":"ClientSecret/read-client-secret-expiration-command/#prerequisites","title":"Prerequisites","text":"<ol> <li>Client Configuration: The client must have the <code>nhn:selvbetjening/client</code> scope configured in HelseID Selvbetjening</li> <li>Private Key: Access to the client's current private key (either as a file or string)</li> <li>Network Access: Connectivity to the HelseID Selvbetjening API</li> </ol>"},{"location":"ClientSecret/read-client-secret-expiration-command/#security-considerations","title":"Security Considerations","text":"<ul> <li>Private keys should be stored securely and not exposed in logs</li> <li>Use secure methods to pass private keys to the command (environment variables, secure files, etc.)</li> <li>Ensure the execution environment has appropriate access controls</li> <li>Consider using short-lived execution contexts for better security</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#error-handling","title":"Error Handling","text":"<p>The command provides detailed error messages for common scenarios:</p> <ul> <li>Authentication errors: Invalid client ID or private key</li> <li>Authorization errors: Missing required scopes</li> <li>Network errors: Connectivity issues with HelseID API</li> <li>Parsing errors: Unexpected response format from the API</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#related-commands","title":"Related Commands","text":"<ul> <li><code>generatekey</code>: Generate new RSA key pairs</li> <li><code>updateclientkey</code>: Update client secrets in HelseID</li> </ul>"},{"location":"ClientSecret/read-client-secret-expiration-command/#see-also","title":"See Also","text":"<ul> <li>Client Secret Overview</li> <li>Update Client Secret Commands</li> <li>Generate Key Commands</li> </ul>"}]}